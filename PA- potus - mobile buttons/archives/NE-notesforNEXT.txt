2a. iPad Hover Effect Issue
Issue: On iPad, the button in the same position as the previous correct answer retains a hover effect, despite being a touchscreen.
Involves: CSS
Solution: Touch devices can trigger :hover styles on tap, and the effect persists until another tap. We can disable hover effects on touch devices using a media query.
Add this to your CSS:
@media (hover: none) {
    .option:hover {
        background-color: initial; /* Reset hover background */
        /* Add other properties if needed, e.g., color, border */
    }
}

2b. Mobile Phone Report Card Navigation
Issue: On mobile phones, report card columns stack vertically, but all nine are shown, which doesn’t fit well. You want arrow buttons to cycle through them one at a time.
Involves: CSS and JavaScript
Solution: Use CSS to show only one column at a time on small screens, and add JavaScript to manage navigation with arrow buttons, showing “Previous” and “Next” only when relevant.

@media (max-width: 600px) {
    #reportColumns {
        display: flex;
        flex-direction: column;
    }
    .report-column {
        display: none; /* Hide all columns by default */
    }
    .report-column.active {
        display: block; /* Show only the active column */
    }
}

HTML Update (Add Arrow Buttons)
Add these buttons inside the reportCard div:
<div id="reportCard">
    <!-- Existing content -->
    <button id="prevColumn" style="display: none;">&lt; Previous</button>
    <button id="nextColumn" style="display: none;">Next &gt;</button>
</div>

JavaScript Update
Add these functions to manage the active column and button visibility:
function showReportCard() {
    // ... existing code to generate columns ...
    if (window.innerWidth <= 600) {
        document.querySelectorAll('.report-column').forEach((col, index) => {
            col.classList.remove('active');
            if (index === 0) {
                col.classList.add('active'); // Start with first column
            }
        });
        updateArrowButtons(0);
    }
    // ... existing code ...
}

function updateArrowButtons(currentIndex) {
    const prevButton = document.getElementById('prevColumn');
    const nextButton = document.getElementById('nextColumn');
    prevButton.style.display = currentIndex > 0 ? 'block' : 'none';
    nextButton.style.display = currentIndex < 8 ? 'block' : 'none'; // 9 columns = indices 0-8
}

function showColumn(index) {
    document.querySelectorAll('.report-column').forEach((col, i) => {
        col.classList.toggle('active', i === index);
    });
    updateArrowButtons(index);
}

// Event listeners for arrow buttons
document.getElementById('prevColumn').addEventListener('click', () => {
    const currentIndex = Array.from(document.querySelectorAll('.report-column')).findIndex(col => col.classList.contains('active'));
    if (currentIndex > 0) {
        showColumn(currentIndex - 1);
    }
});

document.getElementById('nextColumn').addEventListener('click', () => {
    const currentIndex = Array.from(document.querySelectorAll('.report-column')).findIndex(col => col.classList.contains('active'));
    if (currentIndex < 8) {
        showColumn(currentIndex + 1);
    }
});



3: Optional CSS Adjustment
To ensure the text fits nicely, you might tweak the column styling:
.report-column div {
    white-space: nowrap; /* Prevent wrapping */
    overflow: hidden;    /* Handle overflow if needed */
    text-overflow: ellipsis; /* Add ellipsis if text is too long */
}




